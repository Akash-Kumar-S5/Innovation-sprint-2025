{
  "name": "Working Final Email Routing",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "final-working-route",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-final-working",
      "name": "Working Email Routing Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "jsCode": "// Extract and store query from webhook\nconst webhookData = $input.first().json;\nconst query = webhookData.body?.query || webhookData.query || '';\n\nif (!query || query.trim() === '') {\n  throw new Error('No query provided in request');\n}\n\nconsole.log('=== QUERY RECEIVED ===');\nconsole.log(`Query: \"${query}\"`);\n\n// Classification logic\nconst adminPatterns = [\n  /technical\\s+(escalation|issue|problem)/i, /escalate/i, /technical\\s+support/i,\n  /system\\s+(issue|problem|down|failure)/i, /server\\s+(down|issue|problem|crash)/i, /website\\s+(down|not\\s+working)/i,\n  /security\\s+(concern|issue|breach|problem)/i, /hack/i, /breach/i, /unauthorized/i, /suspicious/i,\n  /data\\s+(issue|problem|loss|corruption)/i, /database\\s+(issue|problem|error)/i, /data\\s+loss/i, /backup/i,\n  /integration\\s+(problem|issue|down|failure)/i, /api\\s+(down|issue|problem|failure|integration)/i,\n  /urgent/i, /critical/i, /production/i, /affecting\\s+(users|customers|production)/i\n];\n\nconst queryLower = query.toLowerCase();\nlet classification = 'customer'; // Default\n\n// Check admin patterns first\nfor (const pattern of adminPatterns) {\n  if (pattern.test(queryLower)) {\n    classification = 'admin';\n    break;\n  }\n}\n\nconst priority = classification === 'admin' ? 'HIGH' : 'NORMAL';\nconst timestamp = new Date().toISOString();\n\nconsole.log(`Classification: ${classification}`);\nconsole.log(`Priority: ${priority}`);\n\n// Return query data to pass to next node\nreturn {\n  query: query,\n  classification: classification,\n  priority: priority,\n  timestamp: timestamp,\n  triggerAPI: true\n};"
      },
      "id": "extract-and-classify",
      "name": "Extract and Classify Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "url": "https://api.escuelajs.co/api/v1/users",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "http-final",
      "name": "Get Users from API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "jsCode": "// Get ALL users from API and classification data\nconst allInputs = $input.all();\nconst usersData = allInputs.map(input => input.json);\n\nconsole.log('=== PROCESSING COMPLETE WORKFLOW ===');\nconsole.log(`Collected ${usersData.length} users from API`);\n\n// Get classification data from the Extract node\nlet queryData = null;\ntry {\n  queryData = $('Extract and Classify Query').first().json;\n  console.log(`Retrieved classification data: ${queryData.classification}`);\n} catch (error) {\n  throw new Error('Could not retrieve classification data from Extract node');\n}\n\nif (!queryData || !queryData.query) {\n  throw new Error('No query data found from classification node');\n}\n\nconsole.log(`Processing query: \"${queryData.query}\"`);\nconsole.log(`Classification: ${queryData.classification}`);\nconsole.log(`Priority: ${queryData.priority}`);\n\n// Check role distribution\nconst roleCount = {};\nusersData.forEach(user => {\n  const role = user.role || 'unknown';\n  roleCount[role] = (roleCount[role] || 0) + 1;\n});\nconsole.log('Available roles:', roleCount);\n\n// Filter users by role\nlet targetUsers = usersData.filter(user => {\n  const userRole = (user.role || '').toLowerCase();\n  return userRole === queryData.classification.toLowerCase();\n});\n\nconsole.log(`Found ${targetUsers.length} users with role '${queryData.classification}'`);\n\nif (targetUsers.length === 0) {\n  throw new Error(`No users found with role '${queryData.classification}'. Available roles: ${Object.keys(roleCount).join(', ')}`);\n}\n\n// Limit to 2 users and show details\ntargetUsers = targetUsers.slice(0, 2);\ntargetUsers.forEach((user, index) => {\n  console.log(`  ${index + 1}. ${user.name} (${user.email}) - Role: ${user.role}`);\n});\n\n// Prepare email content\nconst isAdmin = queryData.classification === 'admin';\nconst subjectPrefix = isAdmin ? '[ADMIN - URGENT]' : '[CUSTOMER]';\nconst urgencyText = isAdmin ? 'URGENT ATTENTION REQUIRED' : 'Standard Support Request';\n\nconst emailBody = isAdmin ? \n  `🚨 ADMIN ALERT - IMMEDIATE ACTION REQUIRED 🚨\\n\\n${urgencyText}\\n\\nClassification: ${queryData.classification.toUpperCase()}\\nPriority: ${queryData.priority}\\nTimestamp: ${queryData.timestamp}\\n\\n--- SUPPORT REQUEST ---\\n${queryData.query}\\n--- END REQUEST ---\\n\\nThis is an administrative query requiring immediate technical attention.\\nPlease prioritize this request and respond within 1 hour.\\n\\n⚠️ If this is a security issue, follow emergency protocols immediately.\\n\\n---\\nAutomated n8n Email Routing System\\nAPI Integration: escuelajs.co/api/v1/users\\nGenerated: ${queryData.timestamp}` :\n  `Hello Support Team,\\n\\nNew customer support request received:\\n\\nClassification: ${queryData.classification.toUpperCase()}\\nPriority: ${queryData.priority}\\nReceived: ${queryData.timestamp}\\n\\n--- CUSTOMER REQUEST ---\\n${queryData.query}\\n--- END REQUEST ---\\n\\nPlease respond to this customer inquiry within 24 hours.\\nEnsure to follow up with the customer directly.\\n\\nFor urgent matters, please escalate to the admin team immediately.\\n\\n---\\nAutomated n8n Email Routing System\\nAPI Integration: escuelajs.co/api/v1/users\\nGenerated: ${queryData.timestamp}\\n\\nBest regards,\\nSupport Team`;\n\nconsole.log('=== PREPARING EMAIL DATA ===');\nconsole.log(`Subject: ${subjectPrefix} ${urgencyText}`);\n\n// Return email data for each user\nreturn targetUsers.map(user => ({\n  // API user data\n  userId: user.id,\n  userName: user.name,\n  userEmail: user.email,\n  userRole: user.role,\n  \n  // Classification data\n  originalQuery: queryData.query,\n  classification: queryData.classification,\n  priority: queryData.priority,\n  timestamp: queryData.timestamp,\n  \n  // Email content\n  subject: `${subjectPrefix} ${urgencyText}`,\n  body: emailBody,\n  targetEmail: 'trainingtempmail@gmail.com',\n  fromEmail: 'noreply@yourcompany.com'\n}));"
      },
      "id": "process-users-final",
      "name": "Process Users and Prepare Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "fromEmail": "={{ $json.fromEmail }}",
        "toEmail": "={{ $json.targetEmail }}",
        "subject": "={{ $json.subject }}",
        "text": "=Email routing notification for API User: {{ $json.userName }} (ID: {{ $json.userId }})\\n\\nOriginal recipient would be: {{ $json.userEmail }}\\nRole: {{ $json.userRole }}\\n\\n{{ $json.body }}\\n\\n---\\nDEMO: This email was sent to trainingtempmail@gmail.com for testing.\\nIn production, this would go to: {{ $json.userEmail }}",
        "options": {}
      },
      "id": "send-final-email",
      "name": "Send Final Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1120, 400],
      "credentials": {
        "smtp": {
          "id": "gmail-smtp-backup",
          "name": "Gmail SMTP Backup"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Create final response with all correct data\nconst emailResults = $input.all();\nconst firstResult = emailResults[0]?.json || {};\n\nconsole.log('=== CREATING FINAL RESPONSE ===');\nconsole.log(`Processed ${emailResults.length} email sends`);\n\n// Extract all recipient data\nconst recipients = emailResults.map(result => ({\n  apiUserId: result.json.userId,\n  apiUserName: result.json.userName,\n  originalEmail: result.json.userEmail,\n  role: result.json.userRole,\n  notificationSentTo: result.json.targetEmail,\n  status: 'sent'\n}));\n\nconst response = {\n  success: true,\n  message: `Successfully processed query and sent ${emailResults.length} email notification${emailResults.length === 1 ? '' : 's'}`,\n  objective: {\n    description: \"Email routing system with API integration\",\n    apiIntegration: \"✅ GET request to https://api.escuelajs.co/api/v1/users\",\n    queryClassification: \"✅ Customer vs Admin classification\",\n    emailRouting: \"✅ Role-based email routing\",\n    targetEmail: \"✅ trainingtempmail@gmail.com\"\n  },\n  data: {\n    query: {\n      text: firstResult.originalQuery || 'Query processed',\n      classification: firstResult.classification || 'unknown',\n      priority: firstResult.priority || 'NORMAL',\n      timestamp: firstResult.timestamp || new Date().toISOString()\n    },\n    apiResponse: {\n      source: \"https://api.escuelajs.co/api/v1/users\",\n      usersProcessed: recipients.length,\n      method: \"GET\"\n    },\n    emailDelivery: {\n      emailsSent: emailResults.length,\n      targetAddress: \"trainingtempmail@gmail.com\",\n      provider: \"Google SMTP\",\n      recipients: recipients\n    }\n  },\n  examples: {\n    customerQuery: \"I was charged twice for this month's subscription. Can someone from billing review my account and process a refund for the duplicate charge?\",\n    adminQuery: \"URGENT: Our API integration is down and affecting our production systems. We need immediate technical support to resolve this critical issue.\"\n  },\n  workflow: {\n    name: \"Working Final Email Routing\",\n    version: \"2.0\",\n    status: \"completed\",\n    nodes: 6\n  }\n};\n\nconsole.log(`✅ COMPLETE! Query: ${response.data.query.text}`);\nconsole.log(`✅ Classification: ${response.data.query.classification}`);\nconsole.log(`✅ Priority: ${response.data.query.priority}`);\nconsole.log(`✅ Emails sent: ${response.data.emailDelivery.emailsSent}`);\nconsole.log('✅ Recipients:');\nrecipients.forEach((recipient, index) => {\n  console.log(`  ${index + 1}. ${recipient.apiUserName} (${recipient.originalEmail}) - Role: ${recipient.role}`);\n});\n\nreturn response;"
      },
      "id": "final-response-working",
      "name": "Create Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response-working",
      "name": "Send Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 400]
    }
  ],
  "connections": {
    "Working Email Routing Webhook": {
      "main": [
        [
          {
            "node": "Extract and Classify Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract and Classify Query": {
      "main": [
        [
          {
            "node": "Get Users from API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Users from API": {
      "main": [
        [
          {
            "node": "Process Users and Prepare Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Users and Prepare Emails": {
      "main": [
        [
          {
            "node": "Send Final Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Final Email": {
      "main": [
        [
          {
            "node": "Create Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Final Response": {
      "main": [
        [
          {
            "node": "Send Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2.0.0",
  "meta": {
    "instanceId": "working-final-email-routing"
  },
  "id": "working-final-email-routing-workflow",
  "tags": ["working", "final", "complete", "api", "email", "routing"]
}